top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed, failed)
sat
submit()
submit()
bye()
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "./housing")
H <- read.csv("./housing")
H
agLog <- filter(H, ACR == 3, AGS == 6)
agLog
agLog
agLog <- H[H$ACR == 3 & H$AGS == 6]
agLog <- H[H$ACR == 3 & H$AGS == 6].index
H$ACR==3 & H$AGS == 6
agLog <- H$ACR==3 & H$AGS == 6
which(agLog)
library(jpeg)
library("jpeg")
install.packages(jpeg)
install.packages("jpeg")
library(jpeg)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native =T)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native =T)
readJPEG("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native =T)
library(httpuv)
readJPEG("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native =T)
url <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
url <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = ./j.jpg)
url <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "./j.jpg")
url <- download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", destfile = "./j.jpg", mode="wb")
img <- readJPEG("./j.jpg", native = T)
quantile(img)
quantile(img, 30)
quantile(img, probs=seq(30, 80))
quantile(img, probs=seq(.30, .80))
quantile(img, probs=c(.30, .80))
-15258512 + 638
-15258512 - 638
gdp <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
edu <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
?merge
gdp
colnames(gdp)
View(gdp)
View(edu)
merge(gdp,edu, by.x="X", by.y="CountryCode")
colnames(merge(gdp,edu, by.x="X", by.y="CountryCode"))
mg <- merge(gdp,edu, by.x="X", by.y="CountryCode")
mg$X
arrange(mg,desc(mg$Gross.domestic.product.2012))
mg <- merge(gdp,edu, by.x="X", by.y="CountryCode")
colnames(mg)
ng <- [mg$X, mg$Gross.domestic.product.2012, mg$Long.Name, mg$Short.Name]
ng <- mg[mg$X, mg$Gross.domestic.product.2012, mg$Long.Name, mg$Short.Name]
ng <- mg[X, Gross.domestic.product.2012, Long.Name, Short.Name]
ng <- mg["X", "Gross.domestic.product.2012", "Long.Name", "Short.Name"]
ng <- mg[c("X", "Gross.domestic.product.2012", "Long.Name", "Short.Name")]
ng
head(ng)
arrange(ng, desc("Gross.domestic.product.2012"))
arrange(ng, desc("Gross.domestic.product.2012"), na.rm=T)
library(dplyr)
arrange(ng, desc("Gross.domestic.product.2012"), na.rm=T)
arrange(ng, desc(Gross.domestic.product.2012), na.rm=T)
arrange(ng, desc(Gross.domestic.product.2012), na.rm=F)
gdp$X
edu$CountryCode
X<-gdp$X
E<-edu$CountryCode
View(X)
X<-gdp[c("X")]
View(X)
E<-edu[c("CountryCode")]
View(E)
Y<-arrange(X,X,rm.na=T)
View(Y)
Y<-arrange(X,X$X,rm.na=T)
X
X<-X[X$X != ""]
X<-X[X$X != "",]
View(X)
head(X)
E<-E[E$CountryCode != "",]
head(E)
colnames(X)
colnames(X)[0]="cc"
X<-arrange(X,X)
X<-arrange(X,X$X)
as.data.frame(X)
X<-as.data.frame(X)
colnames(X)
X<-arrange(X, X$X)
X<-arrange(X, X)
X
E
E<-as.data.frame(E)
E
E<-arrange(E, CountryCode)
E<-arrange(E, E$E)
E<-arrange(E, E)
E
merge(X,E)
merge(X,E, by.x = X, by.y = E)
colnames(X)
colnames(E)
merge(X,E, by.x = X$X, by.y = E$E)
E
X
unique(X$X)
unique(E$E)
merge(X,E, by.x = X$X, by.y = E$E)
merge(X,E, by.x = "X", by.y = "E")
merge(X,E, by.x = "X", by.y = "E",all=T)
E["E" %in X,]
E["E" %in% X,]
E["E" %in% X$X,]
gdp <- read_csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
spec(gdp)
colnames(gdp)
write_excel_csv(gdp,"gdp.xlsx")
getwd()
edu <- read_csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
colnames(edu)
write_excel_csv(edu,"edu.xlsx")
E <- read.csv("edu.xlsx")
G <- read.csv("gdp.xlsx")
EG <- merge(G,E, by="CountryCode")
arrange(EG,desc(rank()))
arrange(EG,desc(rank))
arrange(EG,desc(Rank))
group_by(EG,"Income Group")
group_by(EG,"Income Group")[1]
EG_Group <- group_by(EG,"Income Group")
sapply(EG_Group, mean(rank()))
sapply(EG_Group, mean(rank))
sapply(EG_Group, mean(Rank))
sapply(EG_Group, mean(EG_Group$Rank))
sapply(EG_Group, sum(EG_Group$Rank))
EG_Group <- group_by(EG, EG$Income.Group)
summarise(EG_Group)
summarise(EG_Group, n=n())
summarise(EG_Group, n=mean())
summarise(EG_Group, mean=mean())
summarise(EG_Group, meanRank = mean(Rank))
quantile(EG, n=5)
quantile(EG, seq(1:5))
quantile(EG, probs = seq(1:5))
quantileCut(EG, 5)
quantile(EG)
quantile(EG, Rank)
quantile(EG, "Rank")
quantile(EG, probs = seq(0,1,2/5))
quantile(EG, probs = seq(0,1,2/5), EG$Rank)
lapply(EG, quantile, probs = seq(0,1,2/5))
mutate(EG, q_rank = ntile(EG$Rank,5))
EG_tiles <- mutate(EG, q_rank = ntile(EG$Rank,5))
View(EG_tiles)
EG_tiles[EG_tiles$CountryCode, EG_tiles$Rank]
EG_tiles[,c(EG_tiles$CountryCode, EG_tiles$Rank)]
EG_Tiles %>% select(EG_tiles$Rank)
EG_Tiles %>% select("Rank")
EG_Tiles %>% select(Rank)
EG_tiles %>% select(Rank)
colnames(EG_tiles)
EG_Lower <- EG_tiles %>% select(CountryCode, Rank, Income.Group)
View(EG_Lower)
View(EG_Lower)
group_by(EG_Lower, Income.Group)
filter(EG_lower, Income.Group == "Lower middle income")
filter(EG_Lower, Income.Group == "Lower middle income")
filter(filter(EG_lower, Income.Group == "Lower middle income"), Rank<=38)
filter(filter(EG_Lower, Income.Group == "Lower middle income"), Rank<=38)
24*60
23*60+55
library(lubridate)
library(stringr)
library(ggplot2)
if (!file.exists('activity.csv'))
unzip('./activity.zip')
activity <- read.csv('./activity.csv')
minutes <- substring(activity$interval,
nchar(activity$interval) - 2 + 1,
nchar(activity$interval))
hours <- substring(activity$interval, 1, nchar(activity$interval) - 2)
hours[hours == ''] <- '0'
activity$minute_of_day <- as.numeric(hours) * 60 + as.numeric(minutes)
activity$day <- as.numeric(interval(ymd('2012-10-01'),activity$date))/(3600*24)
tot_spd <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
df <- data.frame(as.numeric(ymd(names(tot_spd))), tot_spd)
names(df) <- c('numeric_date', 'steps')
hist(df$steps, breaks = 20, xlab = 'Number of Steps', ylab = 'Number of Days', main = '')
activity
head(activity)
tail(activity)
activity$day <- as.numeric(interval(ymd('2012-09-30'),activity$date))/(3600*24)
tot_spd <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
df <- data.frame(as.numeric(ymd(names(tot_spd))), tot_spd)
names(df) <- c('numeric_date', 'steps')
hist(df$steps, breaks = 20, xlab = 'Number of Steps', ylab = 'Number of Days', main = '')
tail(activity)
head(activity)
library(lubridate)
library(stringr)
library(ggplot2)
if (!file.exists('activity.csv'))
unzip('./activity.zip')
activity <- read.csv('./activity.csv')
minutes <- substring(activity$interval,
nchar(activity$interval) - 2 + 1,
nchar(activity$interval))
hours <- substring(activity$interval, 1, nchar(activity$interval) - 2)
hours[hours == ''] <- '0'
activity$minute_of_day <- as.numeric(hours) * 60 + as.numeric(minutes)
tot_spd <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
tot_spd <- data.frame(as.numeric(ymd(names(tot_spd))), tot_spd)
names(tot_spd) <- c('numeric_date', 'steps')
hist(tot_spd$steps, breaks = 20,
xlab = 'Total Number of Steps per Day',
ylab = 'Number of Days', main = '')
tot_spd <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
tot_spd <- data.frame(as.numeric(ymd(names(tot_spd))), tot_spd)
names(tot_spd) <- c('numeric_date', 'steps')
hist(tot_spd$steps, breaks = 20,
xlab = 'Total Number of Steps per Day',
ylab = 'Number of Days', main = '')
mean_spd <- round(mean(df$steps, na.rm = TRUE))
mean_spd <- round(mean(tot_spd$steps, na.rm = TRUE))
median_spd <- round(median(tot_spd$steps, na.rm = TRUE))
print(paste("Mean steps per day:", as.character(mean_spd)))
print(paste("Median steps per day:", as.character(median_spd)))
ave_spi <- with(activity, aggregate(steps ~ interval + minute_of_day,
list(interval = interval),
mean, na.rm = TRUE))
par(mar = c(5.1, 4.1, 4.5, 2.1))
plot(ave_spi$minute_of_day, ave_spi$steps, type = 's', lwd = 2,
xlim = range(ave_spi$minute_of_day, na.rm = TRUE),
ylim = range(ave_spi$step, na.rm = TRUE),
xlab = 'Minute of the Day', ylab = 'Average Number of Steps',
main ='Average (Over Days) of Number of Steps in Each Interval')
ave_spi[which.max(ave_spi$steps),]
max_int <- ave_spi[which.max(ave_spi$steps),]
max_int <- ave_spi[which.max(ave_spi$steps),]
print(paste('The interval during which the largest average number of steps occurred was interval number', as.character(max_int$interval)))
print(paste('During this interval the average number of steps was:', as.character(max_int$steps)))
print(paste('This interval began at minute:', as.character(max_int$minute_of_day)))
max_int <- ave_spi[which.max(ave_spi$steps),]
print(paste('The interval during which the largest average number of steps occurred was interval number', as.character(max_int$interval)))
print(paste('During this interval the average number of steps was:', as.character(round(max_int$steps, 2)))
print(paste('This interval began at minute:', as.character(max_int$minute_of_day)))
max_int <- ave_spi[which.max(ave_spi$steps),]
print(paste('The interval during which the largest average number of steps occurred was interval number', as.character(max_int$interval)))
print(paste('During this interval the average number of steps was:', as.character(round(max_int$steps, 2))))
print(paste('This interval began at minute:', as.character(max_int$minute_of_day)))
dates_NA <- sum(is.na(activity$date))
intervals_NA <- sum(is.na(activity$interval))
steps_NA <- sum(is.na(activity$steps))
steps_zero <- sum(activity$steps == 0, na.rm =TRUE)
dates_NA <- paste('Observations with activity$date == NA: ',
as.character(dates_NA))
intervals_NA <- paste('Observations with activity$interval == NA: ',
as.character(intervals_NA))
steps_NA <- paste('Observations with activity$steps == NA: ',
as.character(steps_NA))
steps_zero <- paste('Observations with activity$steps == 0: ',
as.character(steps_zero))
cat(paste(dates_NA, intervals_NA, steps_NA, steps_zero, sep = '\n'))
rm(dates_NA, intervals_NA, steps_NA, steps_zero)
filler <- function(interval, steps){
if(!is.na(steps))
result <- c(steps)
else
result <- ave_spi[ave_spi$interval == interval, ]$steps
return(result)
}
imputed_activity <- activity
imputed_activity$steps <- mapply(filler, imputed_activity$interval, imputed_activity$steps)
tot_imp_spd <- tapply(imputed_activity$steps, imputed_activity$date, sum, na.rm = TRUE)
tot_imp_spd <- data.frame(as.numeric(ymd(names(tot_imp_spd))), tot_imp_spd)
names(tot_imp_spd) <- c('numeric_date', 'steps')
hist(tot_imp_spd$steps, breaks = 20,
xlab = 'Number of Steps',
ylab = 'Number of Days',
main = '')
mean_spd <- round(mean(df$steps))
mean_spd <- round(mean(tot_imp_spd$steps))
median_spd <- round(median(tot_imp_spd$steps))
print(paste("Mean steps per day:", as.character(mean_spd)))
print(paste("Median steps per day:", as.character(median_spd)))
weekend <- function(date){
wkend <- c('Saturday', 'Sunday')
if(weekdays(date) %in% wkend) return('Weekend')
else return('Weekday')
}
imputed_activity$weekend <- sapply(as.Date(imputed_activity$date), weekend)
ave_imp_spi <- aggregate(steps ~ interval + minute_of_day + weekend,
data = imputed_activity, mean)
ggplot(ave_imp_spi, aes(interval, steps)) +
geom_line() + facet_grid(weekend ~ .) +
xlab("Minute of the Day") + ylab("Average Number of Steps")
500/60
mod(500,60)
500%%60
500%60
500 mod 60
800/60
2000/60
getwd()
max_int <- ave_spi[which.max(ave_spi$steps),]
ave_spi <- with(activity, aggregate(steps ~ interval + minute_of_day,
list(interval = interval),
mean, na.rm = TRUE))
suppressMessages(library(lubridate))
suppressMessages(library(stringr))
suppressMessages(library(ggplot2))
if (!file.exists('activity.csv'))
unzip('./activity.zip')
activity <- read.csv('./activity.csv')
minutes <- substring(activity$interval,
nchar(activity$interval) - 2 + 1,
nchar(activity$interval))
hours <- substring(activity$interval, 1, nchar(activity$interval) - 2)
hours[hours == ''] <- '0'
activity$minute_of_day <- as.numeric(hours) * 60 + as.numeric(minutes)
tot_spd <- tapply(activity$steps, activity$date, sum, na.rm = TRUE)
tot_spd <- data.frame(as.numeric(ymd(names(tot_spd))), tot_spd)
names(tot_spd) <- c('numeric_date', 'steps')
hist(tot_spd$steps, breaks = 20,
xlab = 'Total Number of Steps per Day',
ylab = 'Number of Days', main = '')
mean_spd <- round(mean(tot_spd$steps, na.rm = TRUE))
median_spd <- round(median(tot_spd$steps, na.rm = TRUE))
mean_spd <- paste("Mean steps per day:", as.character(mean_spd))
med_spd <- paste("Median steps per day:", as.character(median_spd))
cat(paste(mean_spd, med_spd, sep = '\n'))
ave_spi <- with(activity, aggregate(steps ~ interval + minute_of_day,
list(interval = interval),
mean, na.rm = TRUE))
par(mar = c(5.1, 4.1, 4.5, 2.1))
plot(ave_spi$minute_of_day, ave_spi$steps, type = 's', lwd = 2,
xlim = range(ave_spi$minute_of_day, na.rm = TRUE),
ylim = range(ave_spi$step, na.rm = TRUE),
xlab = 'Minute of the Day', ylab = 'Average Number of Steps',
main ='Average (Over Days) of Number of Steps in Each Interval')
max_int <- ave_spi[which.max(ave_spi$steps),]
interval <- paste('The interval during which the largest average number of steps occurred was interval
number', as.character(row(max_int)))
stps <- paste('During this interval the average number of steps was:',
as.character(round(max_int$steps, 2)))
minute <- paste('This interval began at minute:', as.character(max_int$minute_of_day))
cat(paste(interval, stps, minute, sep = '\n'))
max_int
max_int[1]
max_int[0]
class(max_int)
which(ave_spi$interval == 835)
which(ave_spi$interval == max_int$interval)
max_int <- ave_spi[which.max(ave_spi$steps),]
interval <- paste('The interval during which the largest average number of steps occurred was interval
number', as.character(which(ave_spi$interval == max_int$interval)))
stps <- paste('During this interval the average number of steps was:',
as.character(round(max_int$steps, 2)))
minute <- paste('This interval began at minute:', as.character(max_int$minute_of_day))
cat(paste(interval, stps, minute, sep = '\n'))
max_int <- ave_spi[which.max(ave_spi$steps),]
interval <- paste('The largest average number of steps occurred during interval number',
as.character(which(ave_spi$interval == max_int$interval)))
stps <- paste('During this interval the average number of steps was:',
as.character(round(max_int$steps, 2)))
minute <- paste('This interval began at minute:',
as.character(max_int$minute_of_day))
cat(paste(interval, stps, minute, sep = '\n'))
max_int <- ave_spi[which.max(ave_spi$steps),]
interval <- paste('The largest average number of steps occurred during interval number',
as.character(which(ave_spi$interval == max_int$interval)))
stps <- paste('During this interval the average number of steps was',
as.character(round(max_int$steps, 2)))
minute <- paste('This interval began at minute',
as.character(max_int$minute_of_day))
cat(paste(interval, stps, minute, sep = '\n'))
515/60
(515/60-8)*60
hh <- max_int$minute_of_day%60
hh <- max_int$minute_of_day%%60
mm <- max_int$minute_of_day%%60
hh <- (max_int$minute_of_day - mm)/60
tme <-cat(as.character(hh), ':', as.character(mm), sep = '')
tme <- paste(as.character(hh), ':', as.character(mm))
tme <- paste(as.character(hh), ':', as.character(mm), sep = '')
max_int <- ave_spi[which.max(ave_spi$steps),]
mm <- max_int$minute_of_day%%60
hh <- (max_int$minute_of_day - mm)/60
tme <- paste(as.character(hh), ':', as.character(mm), sep = '')
interval <- paste('The largest average number of steps occurred during interval number',
as.character(which(ave_spi$interval == max_int$interval)))
stps <- paste('During this interval the average number of steps was',
as.character(round(max_int$steps, 2)))
minute <- paste('This interval began at minute',
as.character(max_int$minute_of_day), 'i.e.', tme)
hh <-
cat(paste(interval, stps, minute, sep = '\n'))
max_int <- ave_spi[which.max(ave_spi$steps),]
mm <- max_int$minute_of_day%%60
hh <- (max_int$minute_of_day - mm)/60
tme <- paste('(i.e. ', as.character(hh), ':', as.character(mm), ')', sep = '')
interval <- paste('The largest average number of steps occurred during interval number',
as.character(which(ave_spi$interval == max_int$interval)))
stps <- paste('During this interval the average number of steps was',
as.character(round(max_int$steps, 2)))
minute <- paste('This interval began at minute',
as.character(max_int$minute_of_day), tme)
hh <-
cat(paste(interval, stps, minute, sep = '\n'))
dates_NA <- sum(is.na(activity$date))
intervals_NA <- sum(is.na(activity$interval))
steps_NA <- sum(is.na(activity$steps))
steps_zero <- sum(activity$steps == 0, na.rm =TRUE)
dates_NA <- paste('Observations with activity$date == NA: ',
as.character(dates_NA))
intervals_NA <- paste('Observations with activity$interval == NA: ',
as.character(intervals_NA))
steps_NA <- paste('Observations with activity$steps == NA: ',
as.character(steps_NA))
steps_zero <- paste('Observations with activity$steps == 0: ',
as.character(steps_zero))
cat(paste(dates_NA, intervals_NA, steps_NA, steps_zero, sep = '\n'))
rm(dates_NA, intervals_NA, steps_NA, steps_zero)
filler <- function(interval, steps){
if(!is.na(steps))
result <- c(steps)
else
result <- ave_spi[ave_spi$interval == interval, ]$steps
return(result)
}
imputed_activity <- activity
imputed_activity$steps <- mapply(filler, imputed_activity$interval, imputed_activity$steps)
tot_imp_spd <- tapply(imputed_activity$steps, imputed_activity$date, sum, na.rm = TRUE)
tot_imp_spd <- data.frame(as.numeric(ymd(names(tot_imp_spd))), tot_imp_spd)
names(tot_imp_spd) <- c('numeric_date', 'steps')
hist(tot_imp_spd$steps, breaks = 20,
xlab = 'Number of Steps',
ylab = 'Number of Days',
main = '')
mean_spd <- round(mean(tot_imp_spd$steps))
median_spd <- round(median(tot_imp_spd$steps))
mean_spd <- paste("Mean steps per day:", as.character(mean_spd))
med_spd <- paste("Median steps per day:", as.character(median_spd))
cat(paste(mean_spd, med_spd, sep = '\n'))
weekend <- function(date){
wkend <- c('Saturday', 'Sunday')
if(weekdays(date) %in% wkend) return('Weekend')
else return('Weekday')
}
imputed_activity$weekend <- sapply(as.Date(imputed_activity$date), weekend)
ave_imp_spi <- aggregate(steps ~ interval + minute_of_day + weekend,
data = imputed_activity, mean)
ggplot(ave_imp_spi, aes(interval, steps)) +
geom_line() + facet_grid(weekend ~ .) +
xlab("Minute of the Day") + ylab("Average Number of Steps")
mean_spd <- round(mean(tot_imp_spd$steps))
median_spd <- round(median(tot_imp_spd$steps))
mean_spd <- paste("Mean steps per day:", as.character(mean_spd))
med_spd <- paste("Median steps per day:", as.character(median_spd))
cat(paste(mean_spd, med_spd, sep = '\n'))
weekend <- function(date){
wkend <- c('Saturday', 'Sunday')
if(weekdays(date) %in% wkend) return('Weekend')
else return('Weekday')
}
imputed_activity$weekend <- sapply(as.Date(imputed_activity$date), weekend)
ave_imp_spi <- aggregate(steps ~ interval + minute_of_day + weekend,
data = imputed_activity, mean)
ggplot(ave_imp_spi, aes(interval, steps)) +
geom_line() + facet_grid(weekend ~ .) +
xlab("Minute of the Day") + ylab("Average Number of Steps")
setwd("~/Documents/Courses/Data Science - Specialization/Getting and Cleaning Data/Getting-and-Cleaning-Data-Course-Project")
